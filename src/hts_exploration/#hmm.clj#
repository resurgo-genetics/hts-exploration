(ns hts-exploration.hmm
  (:require [clojure.contrib.io :as io]
            [clojure.core.reducers :as r]
            [clojure.math.numeric-tower :as math]
            [clojure.core.matrix :as m])
  (:use hts-exploration.globals
        edu.bc.utils
        edu.bc.utils.probs-stats
        edu.bc.bio.sequtils.files
        [edu.bc.bio.seq-utils :only (markov-step)]))

(comment
  (def transitions {:s {:s 0.3 :t 0.7} :t {:s 0.1 :t 0.9}})
  (def mtransitions [[0.3 0.7] [0.1 0.9]])
  
  (def emissions {:s {:A 0.4 :B 0.6} :t {:A 0.5 :B 0.5}})
  (def memissions [[0.4 0.6] [0.5 0.5]])
  
  (def initial {:s 0.85 :t 0.15})
  (def minitial [0.85 0.15])
  
  (def path [:A :B :B :A])
  (def path-key {:A 0 :B 1})
  (def mpath (mapv path-key path))
  
  
  (->> [initial transitions emissions]
       (iterate (fn [[i t e]]
                  [(update-initial i t e path)
                   (update-transitions i t e path)
                   (update-emissions i t e path)]))
       (take 5)                      ;upper limit
       

       (partition 2 1) (map transpose)   ;compare successive updates
       ;;check initial/transition/emission for convergence
       (drop-until (fn [x] (every? true? (map #(apply converge? 0.01 %) x))))
       first transpose first))


(defn- alpha [initial transitions emissions path pos state]
  (if (zero? pos)
    (* (initial state)
       (get-in emissions [state (path pos)]))
    (sum
     (map (fn [s] (* (alpha initial transitions emissions path (dec pos) s)
                    (get-in transitions [s state])
                    (get-in emissions [state (path pos)])))
          (keys initial)))))

(defn- alpha2
  "use the core matrix framework"

  [initial transitions emissions path]
  (let [start (mapv (fn [state] (* (m/mget initial state)
                                 (m/mget emissions state (path 0))))
                    (-> initial count range))]
    (loop [y (rest path)
           V [start]]
      (if (seq y)
        (recur (rest y)
               (conj V
                     (m/mul
                      (m/mmul (last V)
                              transitions)
                      (m/get-column emissions (first path)))))
        V))))

(defn- beta [initial transitions emissions path pos state]
  (if (= (-> path count dec) pos)
    1
    (sum
     (map (fn [u] (* (get-in transitions [state u])
                    (get-in emissions [u (path (inc pos))])
                    (beta initial transitions emissions path (inc pos) u)))
          (keys initial)))))

(defn- beta2 [initial transitions emissions path]
  (loop [y (-> path reverse butlast)
         V [(vec (repeat (-> initial count) 1))]]
    (if (seq y)
      (recur (rest y)
             (conj V
                   (mapv (fn [x]
                           (sum
                            (m/mul (last V)
                                   (m/get-row transitions x)
                                   (m/get-column emissions (first y)))))
                        (range (m/dimension-count transitions 0)))))
      V)))

(defn gamma [initial transitions emissions path pos state]
  (* (alpha initial transitions emissions path pos state)
     (beta initial transitions emissions path pos state)
     (/ (sum
         (map (fn [statej]
                (* (alpha initial transitions emissions path pos statej)
                   (beta initial transitions emissions path pos statej)))
              (keys initial))))))

(defn gamma2 [initial transitions emissions path]
  (* (alpha2 initial transitions emissions path)
     (beta2 initial transitions emissions path)
     (/ (sum
         (map (fn [statej]
                (* (alpha initial transitions emissions path pos statej)
                   (beta initial transitions emissions path pos statej)))
              (keys initial))))))

#_(defn psi "from wiki"
    [initial transitions emissions path pos state1 state2]
    (let [fun (fn [state1 state2]
                (* (alpha initial transitions emissions path pos state1)
                   (get-in transitions [state1 state2])
                   (beta initial transitions emissions path (inc pos) state2)
                   (get-in emissions [state2 (path (inc pos))])
                   ))]
      (/ (fun state1 state2)
         (sum
          (for [k (keys initial)
                l (keys initial)]
            (fun k l))))))

(defn psi "from durbin"
  [initial transitions emissions path pos state1 state2]
  (* (alpha initial transitions emissions path pos state1)
     (get-in transitions [state1 state2])
     (beta initial transitions emissions path (inc pos) state2)
     (get-in emissions [state2 (path (inc pos))])))

(defn P-of-seq [initial transitions emissions path]
  (sum
   (map (fn [s]
          (alpha initial transitions emissions path (-> path count dec) s))
        (keys initial))))

#_(defn update-initial
    "from wiki"
    [initial transitions emissions path]
  (reduce (fn [istar state]
            (assoc istar state (gamma initial transitions emissions path 0 state)))
          initial
          (keys initial)))

(defn update-initial "durbin"
  [initial transitions emissions paths]
  (probs
   (reduce (fn [istar state]
             (assoc istar state (sum
                                 (for [p paths]
                                   (gamma initial transitions emissions p 0 state)))))
           initial
           (keys initial))))

#_(defn update-transitions [initial transitions emissions path]
  (reduce (fn [astar [state1 state2]]
            (assoc-in astar [state1 state2] (/ (sum 
                                                (for [i (range (dec (count path)))]
                                                  (psi initial transitions emissions path i state1 state2)))
                                               (sum
                                                (for [i (range (dec (count path)))]
                                                  (gamma initial transitions emissions path i state1))))))
          transitions
          (for [k (keys initial)
                l (keys initial)]
            [k l])))

(defn update-transitions [initial transitions emissions paths]
  (reduce (fn [astar k]
            (assoc astar k (probs (astar k))))
          (reduce (fn [astar [state1 state2]]
                    (assoc-in astar [state1 state2] (sum
                                                     (for [p paths]
                                                       (/ (sum
                                                           (for [i (range (dec (count p)))]
                                                             (psi initial transitions emissions p i state1 state2)))
                                                          (P-of-seq initial transitions emissions p))))))
                  transitions
                  (for [k (keys initial)
                        l (keys initial)]
                    [k l]))
          (keys initial)))

#_(defn update-emissions "from wiki"
    [initial transitions emissions path]
  (reduce (fn [bstar [state emit]]
            (assoc-in bstar [state emit] (/ (sum 
                                             (for [i (range (count path))]
                                               (* (if (= (path i) emit)
                                                    (gamma initial transitions emissions path i state)
                                                    0))))
                                            (sum
                                             (for [i (range (count path))]
                                               (gamma initial transitions emissions path i state))))))
          emissions
          (for [s (keys initial)
                e (keys (emissions s))]
            [s e])))

(defn update-emissions "from durbin"
  [initial transitions emissions paths]
  (reduce (fn [bstar state]
            (assoc bstar state (probs (bstar state))))
          (reduce (fn [bstar [state emit]]
                    (assoc-in bstar [state emit] (sum
                                                  (for [p paths
                                                        i (range (count p))]
                                                    (* (if (= (p i) emit)
                                                         (gamma initial transitions emissions p i state)
                                                         0))))))
                  emissions
                  (for [s (keys initial)
                        e (keys (emissions s))]
                    [s e]))
          (keys initial)))

(defn deep-merge-with
  "Like merge-with, but merges maps recursively, applying the given fn
  only when there's a non-map at a particular level.

  (deepmerge + {:a {:b {:c 1 :d {:x 1 :y 2}} :e 3} :f 4}
               {:a {:b {:c 2 :d {:z 9} :z 3} :e 100}})
  -> {:a {:b {:z 3, :c 3, :d {:z 9, :x 1, :y 2}}, :e 103}, :f 4}"
  [f & maps]
  (apply
    (fn m [& maps]
      (if (every? map? maps)
        (apply merge-with m maps)
        (apply f maps)))
    maps))

(defn vals-in [m]
  ((fn foo [maps]
     (if (not-any? map? (vals maps))
       (vals maps)
       (apply concat (map foo (vals maps)))))
   m))

(defn converge? [thr m1 m2]
  (->> (deep-merge-with #(math/abs (- %1 %2)) m2 m1)
       vals-in
       (every? #(<= % thr))))

(defn baum-welch [initial transitions emissions & paths]
  (let [update-model (juxt update-initial update-transitions update-emissions)]
    (update-model initial transitions emissions paths)))

(defn iterate-baum-welch [limit initial transitions emissions & paths]
  (let [updates (->> [initial transitions emissions]
                     (iterate (fn [model] (apply baum-welch (concat model paths))))
                     (take limit)                    ;upper limit
                     (partition 2 1) (map transpose) ;compare successive updates
                     ;;check initial/transition/emission for convergence
                     )
        x (drop-until (fn [x] (every? true? (map #(apply converge? 0.01 %) x))) updates)]
    (if (empty? x)
      (do (prn "did not converge") (last updates))
      (-> x first transpose first))))


(defn argmax [x] (last (sort-by second x)))


(defn viterbi2 [initial transitions emissions obs-path state-path i]
  (if (zero? i)
    [(argmax
      (map (fn [state]
             [state
              (* (get-in emissions [state (obs-path 0)]) ;pr(obs|init)
                 (initial state))])
           (keys initial)))]
    (let [state-path  (viterbi2 initial transitions emissions obs-path state-path (dec i))]
      (conj state-path
            (argmax
             (map (fn [state]
                    ;(prn :> state-path :state state :y (obs-path i))
                    [state
                     (* (get-in emissions [state (obs-path i)])
                        (get-in transitions [(first (state-path (dec i))) state])
                        (-> state-path last second))])
                  (keys initial)))))))

(defn viterbi
  "finds the most probable state path given a set of observations. for
  a test case let emissions = [\"normal\" \"cold\" \"dizzy\"]"

  [initial transitions emissions obs-path]
  (let [hidden-states (keys initial)
                                        ;ans (sim-mc 3)
        y obs-path ;["normal" "cold" "dizzy"] ;mc steps
        argmax (fn [x] (last (sort-by second x)))
        v1k (fn [state obs] (* (get-in emissions [state (obs-path 0)]) ;pr(obs|init)
                              (initial state))) ;pr(init state)
        start (argmax (map (fn [state]
                             [state (v1k state (first y))])
                           hidden-states))]
    (loop [y (rest y)
           path (conj [] start)]
                                        ;(prn :path path :y y)
      (if (seq y)
        (let [obs (first y)
              vtk (fn [x state obs]
                    (* (get-in emissions [state obs]);pr(obs|new)
                       (get-in transitions [x state]);pr(old->new)
                       (-> path last second))) ;pr(old state)
              ]
          (recur (rest y)
                 (conj path
                       (argmax 
                        (map (fn [newstate]
                               [newstate (vtk (-> path last first) newstate obs)])
                             hidden-states)))))
        path)) ))

           ;get first converent update
